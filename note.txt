# bioconductor install (RTools required)

# Install BiocManager
install.packages("BiocManager")

# Install the GenomicRanges package
BiocManager::install("GenomicRanges")

# Check version
library(BiocManager)
version() # or also sessionInfo()

# Load GenomicRanges
library(GenomicRanges)

# Check for update necessity
valid()

# Load the BSgenome package
library(BSgenome)

# check for S4 system in objects
isS4(myDescriptor) # or also str(myDescriptor) and see if it starts with "Formal class"

MyEpicProject <- setClass(# Define class name with UpperCamelCase)
                          "MyEpicProject",
                          # Define slots, helpful for validation 
                          slots = c(ini = "Date",
                                    end = "Date",
                                    milestone = "character"),
                          # Define inheritance
                          containts = "MyProject")

# Get a summary of the accessors of a main class
.S4methods(class = "GenomeDescriptor")

# Get a summary of the ancestors of a subclass class
showMethods(classes = "GenomeDescriptor", where = search())

# Get a summary for an object
show(myDescriptor)

# What is a_genome's main class?
class(a_genome)  # "BSgenome"

# What is a_genome's other classes?
is(a_genome)  # "BSgenome", "Annotated"

# Is a_genome an S4 representation?
isS4(a_genome)  # TRUE

# Investigate the a_genome using show()
show(a_genome)

# Investigate some other accesors
organism(a_genome)
provider(a_genome)
seqinfo(a_genome)

# The yeast genome can be load using BSgenome
# Load the package and store data into yeast
library(BSgenome.Scerevisiae.UCSC.sacCer3)
yeast <- library(BSgenome.Scerevisiae.UCSC.sacCer3) # it can be explored using the canonical R functions head(seqnames(yeast)) and tail(seqlengths(yeast))

# Number of chromosomes
lenght(yeast)

# Names of the chromosomes
name(yeast)

# length of each chromose by DNA pairs
#seqlengths(yeast)

# Select entire genomic sequence (S4), returning all of the sequences in the yeast genome
getSeq(yeast)

# Argument to select sequences from specific chromosomes, such as chromosome M
getSeq(yeast, names = "chrM") # it is also possible to use yeast$chrM

# Argument to specify the locations of the subsequences to extract using, "start", "end" and "width"
getSeq(yeast, end=10) # selects the first 10 base pairs of each chromosome of the genome

# Count characters of the chrM sequence
nchar(yeast$chrM)

# Other available genomes
available.genomes()

# Biostrings package implements algorithms for fast manipulation of large biological sequences
# Biostrings package contains two generic containers: XString (single sequence) and XStringSet (many sequences)
BiocManager::install("Biostrings")

dna_seq <- DNAString("ATGATCTCGTAA")
rna_seq <- RNAString(dna_seq)
aa_seq <- translate(rna_seq) # also working with dna_seq

# Load packages
library(Biostrings)

# Check the alphabet of the zikaVirus
alphabet(zikaVirus)

# Check the alphabetFrequency of the zikaVirus
alphabetFrequency(zikaVirus)

# Check alphabet of the zikaVirus using baseOnly = TRUE
alphabet(zikaVirus, baseOnly = TRUE)

# Unlist the set, select the first 21 letters, and assign to dna_seq
dna_seq <- subseq(unlist(zikaVirus), end = 21) # "unlist" used ith sets to collate the elements into a single sequence

# Transcribe and translate dna_seq into an AAString object and print it
aa_seq <- translate(dna_seq)

#### Create a StringSet and collate it ####

# Read the sequence as a set
zikaVirus <- readDNAStringSet("data/zika.fa")
length(zikaVirus) # the set contains only one sequence
width(zikaVirus)  # and width 10794 bases

# Collate the sequence
zikaVirus_seq <- unlist(zikaVirus)

length(zikaVirus_seq) #10794 characters

# To create a new set from a single sequence
zikaSet <- DNAStringSet(zikaVirus_set, start = c(1, 101, 201), end = c(100, 200, 300))

length(zikaVirus_seq) #3
width(zikaVirus)  # "100 100 100"

# use the complement

a_seq = DNAString("ATGATCTCGTAA")
complement(a_seq)

# use the reverse

a_seq = DNAString("ATGATCTCGTAA")
rev(a_seq)

# use the reverse complement

reverse(complement(a_seq))
reverseComplement(a_seq))

#### Pattern matching ####

matchPattern(pattern, subject) # 1 str to 1 str
vmatchPatternpattern, subject) # 1 set of str.s to 1 str / 1 str to a set of strs

#### Palindromes ####

findPalindromes() # find palindromic regions in a single sequence

# For Sets
vmatchPattern(pattern = "ACATGGGCCTACCATGGGAG", 
              subject = zikaVirus, max.mismatch = 1)
# For single sequences
matchPattern(pattern = "ACATGGGCCTACCATGGGAG", 
              subject = zikv, max.mismatch = 1)

#### Find the RF of a specific protein ####
# Print rnaframesZikaSet
rnaframesZikaSet

# Translate rnaframesZikaSet
AAzika6F <- translate(rnaframesZikaSet)
AAzika6F

# Count NS5 protein matches in AAzika6F, allowing 15 mismatches
vcountPattern(pattern = NS5, subject = AAzika6F, max.mismatch = 15)

# Subset the frame that contains the match from AAzika6F
selectedSet <- AAzika6F[3] 

# Convert selectedSet into a single sequence
selectedSeq <- unlist(selectedSet)

#### IRanges with numerical arguments for manipulating intervals of sequences ####

# IRanges are hierarchical data structures and can contain metadata
lirabry(IRanges)

# The IRanges() constructor indicates that all of the parameters are optional with default NULL
IRanges(start = NULL, end = NULL, width = NULL, names = NULL)

# Missing arguments will be resolved using the equation width = end - start + 1.

myIRanges <- IRanges(start = 200, end = 30)

(myIRanges_width <- IRanges(start = c(1, 20), end = (30, 11)))
(myIRanges_end <- IRanges(start = c(1, 20), end = 30))

# Rle (run length encoding) definition to compute and store the length and values of a vector or factor

# In this case the first two elements are skipped and the range has a width of 2
# If there are FALSE expressions in the middle, the ranges will be split
IRanges(start = c(FALSE, FALSE, TRUE, TRUE))

# width and lengths functions are both used to check the width
width(seq)
lengths(seq)

#### GRanges ####

# Genomic Ranges package
library(GenomicRanges)

# In this case a range is associated with a chromosome and a strand
(myGR <- GRanges("chr:200-300"))

# transform in Granges a dataframe
(myGR <- as(df, "GRanges"))

# used for chromosome names
seqnames(gr)

# returns an IRanges object for ranges
ranges(gr)

# stores metadata columns
mcols(gr)

# generic function to store sequence information
seqinfo(gr)

# stores the genome name
genome(gr)

# Chromosome X GRanges
library(TxDb.Hsapiens.UCSC.hg38.knownGene)

hg <- TxDb.Hsapiens.UCSC.hg38.knownGene

# to test other filters, valid names for this list are: "gene_id", "tx_id", "tx_name", "tx_chrom", "tx_strand", "exon_id", "exon_name", "exon_chrom", "exon_strand", "cds_id", "cds_name", "cds_chrom", "cds_strand", and "exon_rank"
hg_chrXg <- genes(hg, filter = list(tx_chrom = c("chrX")))

# Extract all positive stranded genes in chromosome X, assign to hg_chrXgp, then sort it
# Extract all positive stranded genes in chromosome X, assign to hg_chrXgp, then sort it
hg_chrXgp <- genes(hg, filter = list(tx_chrom = c("chrX"), tx_strand = "+"))
sort(hg_chrXgp)

# GRangesList-class (an efficient container for storing large collections of GRanges)

# to construct a GRangesList
as(mylist, ""GRangesList")
GRangesList(myGranges1, myGranges2, myGranges3)

# to convert back to GRanges
unlist(myGRangesList)

# to split GRanges objects into sub-elements (it returns a GRangesList element)
slidingWindows(hg:crX, width = 20000, step = 10000)

# GenomicFeatures
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
hg <- TxDb.Hsapiens.UCSC.hg38.knownGene

# prefilter results to chrX
seqlevels(hg) <- c("chrX")

# transcripts extracting function
transcript(hg, columns = c("tx_id", "tx_name"), filter = NULL)

# exons extracting function
exons(hg, columns = c("tx_id", "tx_name"), filter = list(tx_id = "179161"))

# To find genes of interest in a larger interval or collection of intervals
overlapsAny(ABCD1, hg_chrX)

# integer vector of counts
countOverlaps(query, subject)

# Hits object
findOverlaps(query, subject)

# GRangesList object
subsetOverlaps(query, subject)

# Example

# Load the human transcripts DB to hg
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
hg <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Prefilter chromosome X "chrX" using seqlevels()
seqlevels(hg) <- c("chrX")

# Get all transcripts by gene and print it
hg_chrXt <- transcriptsBy(hg, by = "gene")
hg_chrXt

# Select gene `215` from the hg_chrXt
hg_chrXt$`215`

#### Sequence files ####

library(ShortRead)

# Read fasta
fasample <- readFasta(dirPath = "data/", pattern = "fasta")

# Write a ShortRead object
writeFasta(fasample, file = "data/sample.fasta")

# Read fastq (qualityType nd filter are particular arguments for reading fastq files with readFastq())
fqsample <- readFastq(dirPath = "data/", pattern = "fastq")

# Write a ShortRead object
writeFastq(fqsample, file = "data/sample.fastq.gz")

# Subsampling
set.seed(123)
sampler <- FastqSampler("data/SRR1971253.fastq", 500)

# save the yield of 500 read sequences
sample_small <- yield(sampler)

#### Sequence quality ####

# Quality encoding
encoding(quality(fqsample))
quality(fqsample)

quality(fqsample)[1]

# To Transform the score into numerical
pq <- PhredQaulity(quality(fqsample))
qs <- as(pq, "IntegerList")

# Quality assessment
qaSummary <- qa(fqsample, lane = 1) # Optional lane
names(qaSummary)

# sequence alphabet
alphabet(sread(fullSample))

abc <- alphabetByCycle(sread(fullSample))

# Each observation is a letter and each variable is a cycle. First, select the 4 first rows nulceotides A, C, G, T and then transpose
nucByCycle <- t(abc[1:4,])

nucByCycle <- numByCycle %>% as_tibble() %>% # convert to tibble
                      mutate(cycle = 1:50) # add cycle Numbers

# Glimpse nucByCycle
glimpse(nucByCycle)

# Create a line plot of cycle vs. count
nucByCycle %>% 
  # Gather the nucleotide letters in alphabet and get a new count column
  pivot_longer(-cycle, names_to = "alphabet", values_to = "count") %>% 
  ggplot(aes(x = cycle, y =  count, color = alphabet)) +
  geom_line(size = 0.5 ) +
  labs(y = "Frequency") +
  theme_bw() +
  theme(panel.grid.major.x = element_blank())

#### Match and filter ####

# Counting duplicates TRUE is the number of duplicates
table(srduplicated(dfsample))

# Cleaning reads from duplicated x[fun(x)]
clearReads <- mydReads[srduplicated(mydReads) == FALSE]

# Use a custom filter to remove reads from fqsample
# This filter to remove reads Shorter than a min mumber of bases
minWidth <- 51
readWidthCutOff <- srFilter(function(x) {width(x) >= minWidth},
                            name = "MinWidth")

# Save your filter, .name is optional
myFilter <- nFilter(threshold = 10, .name = "cleanNFilter")

# Use the filter at reading point
filtered <- readFastq(dirPath = "data", pattern = ".fastq", filter = myFilter)

myFilterID <- idfilter(regex = ":3:1")

# Will return only those ids that contain the rgular expression

# Optional parameters are .name, fixed and exclude
# Use the filter at reading point
filtered <- readFastq(dirPath = "data", pattern = ".fastq", filter = myFilterID)

# Will return the sequences that have a maximum number of 10 consecutive A's
# Use the filter for subsetting
filtered[myFilterPolyA(filtered)]

#### Multiple assessment ####

library(Rqc)

files <- "data/seq1.fq" "data/seq2.fq" "data/seq3.fq" "data/seq4.fq"

# given the path of the files resulting in a list object
qaRqc <- rqcQA(files, workers = 4)

perFileInformation(qaRqc)

set.seed(123)

qaRqc_sample <- rqcQA(files, workers = 4, sample = TRUE, n = 500))

# Paired-end fails
pfiles <- "data/seq_11.fq" "data/seq1_2.fq" "data/seq2_1.fq" "data/seq2_2.fq"
qaRqc_paired <- rqcQA(pfiles, workers = 4, pair = c(1, 1, 2, 2)))

# To create a report
reportFile <- rqcReport(qaRqc, templateFile = "myReport.Rmd")
browseURL(reportFile) # For browser visualization

# Average per cycle quality plot
rqcCycleAverageQualityPlot(qa)

# Average per cycle quality plot with white background
rqcCycleAverageQualityPlot(qa)

# Read quality plot with white background
rqcReadQualityPlot(qa)